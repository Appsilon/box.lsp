[{"path":"https://appsilon.github.io/box.lsp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ricardo Rodrigo Basa. Author, maintainer. Pavel Demin. Author. Jakub Nowicki. Author. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/box.lsp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Basa R, Demin P, Nowicki J (2024). box.lsp: Provides 'box' Compatibility 'languageserver'. R package version 0.1.2, https://appsilon.github.io/box.lsp/, https://github.com/Appsilon/box.lsp.","code":"@Manual{,   title = {box.lsp: Provides 'box' Compatibility for 'languageserver'},   author = {Ricardo Rodrigo Basa and Pavel Demin and Jakub Nowicki},   year = {2024},   note = {R package version 0.1.2, https://appsilon.github.io/box.lsp/},   url = {https://github.com/Appsilon/box.lsp}, }"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"boxlsp-","dir":"","previous_headings":"","what":"Provides box Compatibility for languageserver","title":"Provides box Compatibility for languageserver","text":"Experimental* custom language server parser hook box modules. package attempt provide box-compatibility languageserver used VS Code. code based initial work Pavel Demin.","code":""},{"path":[]},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"Provides box Compatibility for languageserver","text":"Install box.lsp langaugeserver (languageserver going installed default!). NOTE: Rhino, install box.lsp rhino::pkg_install(\"box.lsp\") languageserver renv::install(\"languageserver\"). box.lsp needs added dependencies.R stored renv.lock, used .Rprofile. hand, installing languageserver makes sense one uses VSCode Vim, used level developer’s environment. box.lsp::use_box_lsp() configure project’s .Rprofile file. Restart R session load .Rprofile.","code":""},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"how-to-develop","dir":"","previous_headings":"","what":"How to develop","title":"Provides box Compatibility for languageserver","text":"Ensure Imports Suggests packages installed. Set R_LANGSVR_LOG=./lsp.log .Renviron start logging Restart R session load .Rprofile .Renviron. devtools::load_all() load development functions.","code":""},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"development-work-on-box_use_parser","dir":"","previous_headings":"How to develop","what":"Development work on box_use_parser()","title":"Provides box Compatibility for languageserver","text":"","code":"action <- list(   assign = function(symbol, value) {     cat(paste(\"ASSIGN: \", symbol, value, \"\\n\"))   },   update = function(packages) {     cat(paste(\"Packages: \", packages, \"\\n\"))   },   parse = function(expr) {     cat(paste(\"Parse: \", expr, \"\\n\"))   } )  content <- c(\"box::use(stringr, dplyr[alias = filter, mutate], xml2[...])\", \"filt\", \"stringr$str_c\") expr <- parse(text = content, keep.source = TRUE) box_use_parser(expr[[1]], action)"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"dev-work-on-completion","dir":"","previous_headings":"How to develop","what":"Dev work on completion","title":"Provides box Compatibility for languageserver","text":"Lines characters index zero.","code":"source(\"./tests/testthat/helper-utils.R\") client <- language_client()  temp_file <- withr::local_tempfile(fileext = \".R\") writeLines(   c(     \"box::use(stringr[...])\",     \"str_c\",     \"str_m\"   ),   temp_file )  client %>% did_save(temp_file)  client %>% respond_completion(   temp_file, c(1, 5))"},{"path":[]},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"install-tcplspclient","dir":"","previous_headings":"How to develop > Development and Debugging using TCP LSP Client","what":"Install tcplspclient","title":"Provides box Compatibility for languageserver","text":"interactive client languageserver.","code":"pak::pkg_install(\"milesmcbain/tcplspclient\") devtools::install_github(\"milesmcbain/tcplspclient\")"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"on-instance-a","dir":"","previous_headings":"How to develop > Development and Debugging using TCP LSP Client","what":"On Instance A","title":"Provides box Compatibility for languageserver","text":"","code":"library(tcplspclient) client <- TCPLanguageClient$new(host = \"localhost\", port = 8888)"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"on-instance-b-with-languageserver-package-repo-open","dir":"","previous_headings":"How to develop > Development and Debugging using TCP LSP Client","what":"On Instance B with {languageserver} package repo open","title":"Provides box Compatibility for languageserver","text":"Copy","code":"source(\".Rprofile\")  # custom parsers, custom lsp config # Add `browser()` statements inside `{languageserver}` functions, or # Add debug breakpoints in the RStudio editor. devtools::load_all() # Run `debugonce()`/`debug()` if needed. run(port = 8888)"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"on-instance-a-1","dir":"","previous_headings":"How to develop > Development and Debugging using TCP LSP Client","what":"On Instance A","title":"Provides box Compatibility for languageserver","text":"interactive debugger runs Instance B.","code":"# tcp_test.R box::use(stringr[...])  str_c  some_list <- list(   aaa = \"A\",   bbb = \"B\" )  some_list$a # Check connection client$handshake()  doc_path <- \"tcp_test.R\"  # With every change made to the test document: client$send_notification(   method = \"textDocument/didSave\",   params = list(     textDocument = list(uri = languageserver:::path_to_uri(doc_path)),     text = paste0(stringi::stri_read_lines(doc_path), collapse = \"\\n\")   ) )  # To trigger a completion request: # line and character are index 0 client$send_message(   method = \"textDocument/completion\",   params = list(     textDocument = list(       uri = languageserver:::path_to_uri(doc_path)     ),     position = list(line = 2, character = 5)   ) )"},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Provides box Compatibility for languageserver","text":"want contribute project, please submit regular PR, ’re done new feature bug fix. Reporting bug also helpful - please use Github issues describe problem detailed possible.","code":""},{"path":"https://appsilon.github.io/box.lsp/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Provides box Compatibility for languageserver","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/box_use_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"'box::use' Document Parser — box_use_parser","title":"'box::use' Document Parser — box_use_parser","text":"Custom {languageserver} parser hook {box} modules.","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/box_use_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'box::use' Document Parser — box_use_parser","text":"","code":"box_use_parser(expr, action)"},{"path":"https://appsilon.github.io/box.lsp/reference/box_use_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'box::use' Document Parser — box_use_parser","text":"expr R expression evaluate action list action functions languageserver:::parse_expr().","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/box_use_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'box::use' Document Parser — box_use_parser","text":"Used side-effects provided action list functions.","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/box_use_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'box::use' Document Parser — box_use_parser","text":"","code":"# \\donttest{   action <- list(    assign = function(symbol, value) {      cat(paste(\"ASSIGN: \", symbol, value, \"\\n\"))    },    update = function(packages) {      cat(paste(\"Packages: \", packages, \"\\n\"))    },    parse = function(x) {      cat(paste(\"Parse: \", names(x), x, \"\\n\"))    },    parse_args = function(x) {      cat(paste(\"Parse Args: \", names(x), x, \"\\n\"))    }  )   box_use_parser(expr = expression(box::use(fs)), action = action) #> Packages:  fs  # }"},{"path":"https://appsilon.github.io/box.lsp/reference/use_box_lsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Configures a project to use {box.lsp} — use_box_lsp","title":"Configures a project to use {box.lsp} — use_box_lsp","text":"Configures project use {box.lsp}","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/use_box_lsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configures a project to use {box.lsp} — use_box_lsp","text":"","code":"use_box_lsp(file_path = \".Rprofile\")"},{"path":"https://appsilon.github.io/box.lsp/reference/use_box_lsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configures a project to use {box.lsp} — use_box_lsp","text":"file_path File name append {box.lsp} configuration lines.","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/use_box_lsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configures a project to use {box.lsp} — use_box_lsp","text":"Writes configuration lines file_path.","code":""},{"path":"https://appsilon.github.io/box.lsp/reference/use_box_lsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configures a project to use {box.lsp} — use_box_lsp","text":"","code":"if (interactive()) {   use_box_lsp() }"},{"path":"https://appsilon.github.io/box.lsp/news/index.html","id":"boxlsp-012","dir":"Changelog","previous_headings":"","what":"box.lsp 0.1.2","title":"box.lsp 0.1.2","text":"CRAN release: 2024-09-16 Fixed critical bug causes languageserver crash: Handle long function signatures spanning across multiple lines. (@Gotfrid #23)","code":""},{"path":"https://appsilon.github.io/box.lsp/news/index.html","id":"boxlsp-011","dir":"Changelog","previous_headings":"","what":"box.lsp 0.1.1","title":"box.lsp 0.1.1","text":"CRAN release: 2024-09-10 Fixed one unit test Windows returns different length values.","code":""},{"path":"https://appsilon.github.io/box.lsp/news/index.html","id":"boxlsp-010","dir":"Changelog","previous_headings":"","what":"box.lsp 0.1.0","title":"box.lsp 0.1.0","text":"CRAN release: 2024-09-02 First release.","code":""}]
